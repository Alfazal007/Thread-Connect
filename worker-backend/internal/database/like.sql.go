// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: like.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewLike = `-- name: AddNewLike :one
INSERT INTO likes_count (tweet_id, count) VALUES ($1, $2) returning tweet_id, count
`

type AddNewLikeParams struct {
	TweetID uuid.UUID
	Count   int32
}

func (q *Queries) AddNewLike(ctx context.Context, arg AddNewLikeParams) (LikesCount, error) {
	row := q.db.QueryRowContext(ctx, addNewLike, arg.TweetID, arg.Count)
	var i LikesCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}

const countLikesActual = `-- name: CountLikesActual :one
select count(*) from likes where tweet_id=$1
`

func (q *Queries) CountLikesActual(ctx context.Context, tweetID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLikesActual, tweetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteLike = `-- name: DeleteLike :one
delete from likes_count where tweet_id=$1 returning tweet_id, count
`

func (q *Queries) DeleteLike(ctx context.Context, tweetID uuid.UUID) (LikesCount, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, tweetID)
	var i LikesCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}

const updateLike = `-- name: UpdateLike :one
update likes_count set count=$1 where tweet_id=$2 returning tweet_id, count
`

type UpdateLikeParams struct {
	Count   int32
	TweetID uuid.UUID
}

func (q *Queries) UpdateLike(ctx context.Context, arg UpdateLikeParams) (LikesCount, error) {
	row := q.db.QueryRowContext(ctx, updateLike, arg.Count, arg.TweetID)
	var i LikesCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}
