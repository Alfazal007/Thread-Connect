// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: repost.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addNewRepost = `-- name: AddNewRepost :one
INSERT INTO repost_count (tweet_id, count) VALUES ($1, $2) returning tweet_id, count
`

type AddNewRepostParams struct {
	TweetID uuid.UUID
	Count   int32
}

func (q *Queries) AddNewRepost(ctx context.Context, arg AddNewRepostParams) (RepostCount, error) {
	row := q.db.QueryRowContext(ctx, addNewRepost, arg.TweetID, arg.Count)
	var i RepostCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}

const countRepostActual = `-- name: CountRepostActual :one
select count(*) from repost where tweet_id=$1
`

func (q *Queries) CountRepostActual(ctx context.Context, tweetID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRepostActual, tweetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteRepost = `-- name: DeleteRepost :one
delete from repost_count where tweet_id=$1 returning tweet_id, count
`

func (q *Queries) DeleteRepost(ctx context.Context, tweetID uuid.UUID) (RepostCount, error) {
	row := q.db.QueryRowContext(ctx, deleteRepost, tweetID)
	var i RepostCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}

const updateRepost = `-- name: UpdateRepost :one
update repost_count set count=$1 where tweet_id=$2 returning tweet_id, count
`

type UpdateRepostParams struct {
	Count   int32
	TweetID uuid.UUID
}

func (q *Queries) UpdateRepost(ctx context.Context, arg UpdateRepostParams) (RepostCount, error) {
	row := q.db.QueryRowContext(ctx, updateRepost, arg.Count, arg.TweetID)
	var i RepostCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}
