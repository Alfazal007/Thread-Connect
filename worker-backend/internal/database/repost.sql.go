// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: repost.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countRepostActual = `-- name: CountRepostActual :one
select count(*) from repost where tweet_id=$1
`

func (q *Queries) CountRepostActual(ctx context.Context, tweetID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRepostActual, tweetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateRepost = `-- name: UpdateRepost :one
INSERT INTO repost_count (tweet_id, count)
VALUES ($1, $2)
ON CONFLICT (tweet_id)
DO UPDATE SET count = $2 returning tweet_id, count
`

type UpdateRepostParams struct {
	TweetID uuid.UUID
	Count   sql.NullInt32
}

func (q *Queries) UpdateRepost(ctx context.Context, arg UpdateRepostParams) (RepostCount, error) {
	row := q.db.QueryRowContext(ctx, updateRepost, arg.TweetID, arg.Count)
	var i RepostCount
	err := row.Scan(&i.TweetID, &i.Count)
	return i, err
}
