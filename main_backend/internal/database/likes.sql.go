// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: likes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewLike = `-- name: CreateNewLike :one
insert into likes (id, tweet_id, user_id) values ($1, $2, $3) returning id, user_id, tweet_id
`

type CreateNewLikeParams struct {
	ID      uuid.UUID
	TweetID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) CreateNewLike(ctx context.Context, arg CreateNewLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createNewLike, arg.ID, arg.TweetID, arg.UserID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}

const deleteLike = `-- name: DeleteLike :one
delete from likes where user_id=$1 and tweet_id=$2 returning id, user_id, tweet_id
`

type DeleteLikeParams struct {
	UserID  uuid.UUID
	TweetID uuid.UUID
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, arg.UserID, arg.TweetID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}

const getLike = `-- name: GetLike :one
select id, user_id, tweet_id from likes where user_id=$1 and tweet_id=$2
`

type GetLikeParams struct {
	UserID  uuid.UUID
	TweetID uuid.UUID
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLike, arg.UserID, arg.TweetID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}
