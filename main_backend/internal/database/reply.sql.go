// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reply.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createNewReply = `-- name: CreateNewReply :one
insert into tweets (id, content, user_id, created_at, reply_tweet_id) values ($1, $2, $3, $4, $5) returning id, content, media, public_id, created_at, user_id, reply_tweet_id, repost
`

type CreateNewReplyParams struct {
	ID           uuid.UUID
	Content      sql.NullString
	UserID       uuid.UUID
	CreatedAt    time.Time
	ReplyTweetID uuid.NullUUID
}

func (q *Queries) CreateNewReply(ctx context.Context, arg CreateNewReplyParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createNewReply,
		arg.ID,
		arg.Content,
		arg.UserID,
		arg.CreatedAt,
		arg.ReplyTweetID,
	)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Media,
		&i.PublicID,
		&i.CreatedAt,
		&i.UserID,
		&i.ReplyTweetID,
		&i.Repost,
	)
	return i, err
}

const deleteReply = `-- name: DeleteReply :one
delete from tweets where id=$1 and user_id=$2 returning id, content, media, public_id, created_at, user_id, reply_tweet_id, repost
`

type DeleteReplyParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteReply(ctx context.Context, arg DeleteReplyParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, deleteReply, arg.ID, arg.UserID)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Media,
		&i.PublicID,
		&i.CreatedAt,
		&i.UserID,
		&i.ReplyTweetID,
		&i.Repost,
	)
	return i, err
}
