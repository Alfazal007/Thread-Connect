// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follow.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const alreadyFollowing = `-- name: AlreadyFollowing :one
select id, follower, following from follow where follower=$1 and following=$2
`

type AlreadyFollowingParams struct {
	Follower  uuid.UUID
	Following uuid.UUID
}

func (q *Queries) AlreadyFollowing(ctx context.Context, arg AlreadyFollowingParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, alreadyFollowing, arg.Follower, arg.Following)
	var i Follow
	err := row.Scan(&i.ID, &i.Follower, &i.Following)
	return i, err
}

const createNewFollow = `-- name: CreateNewFollow :one
insert into follow (id, follower, following) values ($1, $2, $3) returning id, follower, following
`

type CreateNewFollowParams struct {
	ID        uuid.UUID
	Follower  uuid.UUID
	Following uuid.UUID
}

func (q *Queries) CreateNewFollow(ctx context.Context, arg CreateNewFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, createNewFollow, arg.ID, arg.Follower, arg.Following)
	var i Follow
	err := row.Scan(&i.ID, &i.Follower, &i.Following)
	return i, err
}

const unfollowUser = `-- name: UnfollowUser :one
delete from follow where follower=$1 and following=$2 returning id, follower, following
`

type UnfollowUserParams struct {
	Follower  uuid.UUID
	Following uuid.UUID
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, unfollowUser, arg.Follower, arg.Following)
	var i Follow
	err := row.Scan(&i.ID, &i.Follower, &i.Following)
	return i, err
}
