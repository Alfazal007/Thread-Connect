// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: repost.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewRepost = `-- name: CreateNewRepost :one
insert into repost (id, tweet_id, user_id) values ($1, $2, $3) returning id, user_id, tweet_id
`

type CreateNewRepostParams struct {
	ID      uuid.UUID
	TweetID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) CreateNewRepost(ctx context.Context, arg CreateNewRepostParams) (Repost, error) {
	row := q.db.QueryRowContext(ctx, createNewRepost, arg.ID, arg.TweetID, arg.UserID)
	var i Repost
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}

const deleteRepost = `-- name: DeleteRepost :one
delete from repost where id=$1 returning id, user_id, tweet_id
`

func (q *Queries) DeleteRepost(ctx context.Context, id uuid.UUID) (Repost, error) {
	row := q.db.QueryRowContext(ctx, deleteRepost, id)
	var i Repost
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}

const getRepost = `-- name: GetRepost :one
select id, user_id, tweet_id from repost where user_id=$1 and tweet_id=$2
`

type GetRepostParams struct {
	UserID  uuid.UUID
	TweetID uuid.UUID
}

func (q *Queries) GetRepost(ctx context.Context, arg GetRepostParams) (Repost, error) {
	row := q.db.QueryRowContext(ctx, getRepost, arg.UserID, arg.TweetID)
	var i Repost
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}

const getRepostById = `-- name: GetRepostById :one
select id, user_id, tweet_id from repost where id=$1
`

func (q *Queries) GetRepostById(ctx context.Context, id uuid.UUID) (Repost, error) {
	row := q.db.QueryRowContext(ctx, getRepostById, id)
	var i Repost
	err := row.Scan(&i.ID, &i.UserID, &i.TweetID)
	return i, err
}
